// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  // Relacionamentos
  contasMensais   ContasMensais[]
  parcelas        Parcelas[]
  gastosVariaveis GastosVariaveis[]
  rendas          Renda[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContasMensais {
  id             String   @id @default(uuid())
  descricao      String
  valor          Decimal  @db.Decimal(10, 2)
  vencimentoDia  Int
  formaPagamento String
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model Parcelas {
  id             String   @id @default(uuid())
  descricao      String
  valorTotal     Decimal  @db.Decimal(10, 2)
  qtdParcelas    Int
  parcelaAtual   Int
  valorParcela   Decimal  @db.Decimal(10, 2)
  vencimentoData DateTime
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model GastosVariaveis {
  id             String   @id @default(uuid())
  data           DateTime
  descricao      String
  categoria      String
  valor          Decimal  @db.Decimal(10, 2)
  formaPagamento String
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model Renda {
  id              String   @id @default(uuid())
  dataRecebimento DateTime
  descricao       String
  valor           Decimal  @db.Decimal(10, 2)
  fonte           String
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}
